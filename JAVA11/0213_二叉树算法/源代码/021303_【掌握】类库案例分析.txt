1、

package cn.mldn.demo;

import java.util.Random;

interface IContent {    // 进行字符串内容的处理操作
    public void deleteBefore(int len) ;
    public String reverse() ;
}
class StringContent implements IContent {
    private StringBuffer buffer = new StringBuffer(26) ; // 当前一定是26个
    public StringContent() {
        this.init();  // 对内容进行初始化的操作
    }
    private void init() {   // 生成数据
        Random random = new Random() ;
        for (int x = 0; x < 26; x++) {
            this.buffer.append((char) ('a' + random.nextInt(26)));
        }
    }
    @Override
    public void deleteBefore(int len) {
        this.buffer.delete(0, len);
    }
    @Override
    public String reverse() {
        return this.buffer.reverse().toString();
    }
    @Override
    public String toString() {
        return this.buffer.toString() ;
    }
}
class Factory {
    public static IContent getInstance() {
        return new StringContent() ;
    }
}
public class TestDemo {
    public static void main(String args[]) throws Exception {
        IContent content = Factory.getInstance() ;
        System.out.println("【初始化内容】" + content);
        content.deleteBefore(5);
        System.out.println("【转置后内容】" + content.reverse());
    }
}


2、
package cn.mldn.demo;

import java.lang.reflect.Array;
import java.util.Arrays;
import java.util.Random;

interface INumber {
    public int [] getData() ; // 返回最终的数据信息
}
class RandomNumber implements INumber {
    private int [] data ;
    public RandomNumber() {
        this(5) ;
    }
    public RandomNumber(int len) {
        if (len > 0) {
            this.data = new int [len] ;
        } else {
            this.data = new int [5] ;
        }
        this.createRandom();    // 生成随机数据
    }
    private void createRandom() {
        Random random = new Random() ;
        for (int x = 0 ; x < this.data.length ; x ++) {
            this.data[x] = random.nextInt(30) + 1 ; // 避免0的问题了
        }
    }
    @Override
    public int[] getData() {
        return this.data;
    }
}
class Factory {
    private Factory() {}
    public static INumber getInstance() {
        return new RandomNumber() ;
    }
}
public class TestDemo {
    public static void main(String args[]) throws Exception {
        INumber num = new RandomNumber() ;
        System.out.println(Arrays.toString(num.getData()));
    }
}


-------------------------------------------------

package cn.mldn.demo;

import java.lang.reflect.Array;
import java.util.Arrays;
import java.util.Random;

interface INumber {
    public int [] getData() ; // 返回最终的数据信息
    public static INumber getInstance(int ... args) {
        if (args.length == 0) {
            return new RandomNumber();
        } else {
            return new RandomNumber(args[0]) ;
        }
    }
}
class RandomNumber implements INumber {
    private int [] data ;
    public RandomNumber() {
        this(5) ;
    }
    public RandomNumber(int len) {
        if (len > 0) {
            this.data = new int [len] ;
        } else {
            this.data = new int [5] ;
        }
        this.createRandom();    // 生成随机数据
    }
    private void createRandom() {
        Random random = new Random() ;
        for (int x = 0 ; x < this.data.length ; x ++) {
            this.data[x] = random.nextInt(30) + 1 ; // 避免0的问题了
        }
    }
    @Override
    public int[] getData() {
        return this.data;
    }
}
public class TestDemo {
    public static void main(String args[]) throws Exception {
        INumber num = INumber.getInstance() ;
        System.out.println(Arrays.toString(num.getData()));
    }
}


3、
package cn.mldn.demo;

interface IValidator{   // 进行操作的验证
    public boolean check() ; // 代码检测
}
class EmailValidator implements IValidator {
    public static final String EMAIL_REGEX = "\\w+@\\w+\\.\\w+" ;
    private String regex ; // 保存正则格式
    private String content ;
    public EmailValidator(String content) {
        this(content, EMAIL_REGEX) ;    // 构造互相调用
    }
    public EmailValidator(String content, String regex) {
        this.regex = regex ;
        this.content = content ;
    }
    @Override
    public boolean check() {
        if (this.content == null || "".equals(this.content)) {
            return false ;
        }
        return this.content.matches(this.regex);
    }
}
class Factory {
    private Factory() {}
    public static IValidator getInstance(String args[] , String ... regex) {
        if (args.length != 1) {
            System.out.println("输入的参数内容有错误，格式为：java TestDemo email地址");
            System.exit(1);
        }
        if (regex.length == 0) {
            return new EmailValidator(args[0]);
        } else {
            return new EmailValidator(args[0], regex[0]) ;
        }
    }
}
public class TestDemo {
    public static void main(String args[]) throws Exception {
        String regex = "[a-zA-Z][a-zA-Z0-9_\\-]+@[a-zA-Z0-9_\\-]+\\.(com|cn|com\\.cn|net|org|gov)" ;
        IValidator validator = Factory.getInstance(args,regex) ;
        System.out.println(validator.check() ? "EMail格式输入正确！" : "Email格式输入错误！");
    }
}


4、
package cn.mldn.demo;

import java.util.Random;

interface IMapping<K,V> {
    /**
     * 进行信息的存储
     * @param key 要保存的标记性的定义，通过此内容查询，key不允许为null
     * @param value 要保存对应的数值
     * @return 如果现在指定的key不存在，则保存完成后返回null，如果存在则返回旧的内容
     */
    public V put(K key, V value);
    /**
     * 根据指定的key获取对应的内容
     * @param key 要查询的key
     * @return 与key对应的value，如果key不存在返回null
     */
    public V get(K key) ;
    public int size() ;
}
class MappingImpl<K ,V> implements IMapping<K,V> {
    private class Entry<K,V> implements Comparable<Entry<K,V>> {  // 定义一个描述结构信息的存储类
        private K key ;
        private V value ;
        public Entry(K key, V value) {
            this.key = key ;
            this.value = value ;
        }
        @Override
        public int compareTo(Entry<K,V> o) {
            return ((Comparable)this.key).compareTo(o.key);
        }
    }
    private class Node {
        private Entry<K,V> data ;
        private Node left ;
        private Node right ;
        public Node(Entry<K,V> data) {
            this.data = data ;
        }
        public V getNode(K key) {
            if (this.data.key.equals(key)) {
                return this.data.value ;
            } else {    // 向后继续判断
                if (((Comparable)this.data.key).compareTo(key) <= 0) {
                    if (this.right != null) {
                        return this.right.getNode(key) ;
                    } else {
                        return null ;
                    }
                } else {
                    if (this.left != null) {
                        return this.left.getNode(key) ;
                    } else {
                        return null ;
                    }
                }
            }
        }
        public V addNode(Node newNode) {
            if (this.data.compareTo(newNode.data) < 0) {
                if (this.right == null) {
                    this.right = newNode;
                } else {
                    return this.right.addNode(newNode) ;
                }
            } else if (this.data.compareTo(newNode.data) > 0) {
                if (this.left == null) {
                    this.left = newNode ;
                } else {
                    return this.left.addNode(newNode) ;
                }
            } else {
                V old = this.data.value ;
                this.data.value = newNode.data.value ; // 替换原始的数据
                return old ; // 返回当前的数据
            }
            return null ;
        }
    }
    private Node root ; // 设置根节点
    private int count ;
    @Override
    public V put(K key, V value) {
        if (key == null) {
            return null ;
        }
        Entry<K,V> entry = new Entry<K,V>(key,value) ;
        Node newNode = new Node(entry) ;
        this.count ++ ;
        if (this.root == null) {
            this.root = newNode ;
            return null ;
        } else {
            return this.root.addNode(newNode) ;
        }
    }

    @Override
    public V get(K key) {
        if (this.root == null) {
            return null ;
        }
        return this.root.getNode(key) ;
    }
    @Override
    public int size() {
        return this.count;
    }
}
interface IStat{   // 进行操作统计
    public IMapping<String,Integer> report() ; // 统计报表
}
class CoinStat implements IStat {
    private int count ; // 总共操作的个数
    private Random random = new Random() ;
    private IMapping<String,Integer> map = new MappingImpl<>() ;
    public CoinStat() {
        this(1000) ;
    }
    public CoinStat(int count) {
        this.count = count ;
        this.handle();
    }
    private void handle() {
        int odd = 0 ; // 保存奇数
        int even = 0 ; // 保存偶数
        for (int x = 0 ; x < this.count ; x ++) {
            if (this.random.nextInt(2) == 1) {
                odd ++ ;
            } else {
                even ++ ;
            }
        }
        this.map.put("odd", odd) ;
        this.map.put("even", even) ;
    }
    @Override
    public IMapping<String, Integer> report() {
        return map ;
    }
}
public class TestDemo {
    public static void main(String args[]) throws Exception {
        IStat stat = new CoinStat() ;
        System.out.println("奇数个数：" + stat.report().get("odd"));
        System.out.println("偶数个数：" + stat.report().get("even"));
    }
}


5、
package cn.mldn.demo;

interface IValidator {
    public boolean test(String ... value) ;
}
class ValidatorImpl implements IValidator {
    private String regex ;
    public ValidatorImpl(String regex) {
        this.regex = regex ;
    }
    @Override
    public boolean test(String... value) {
        if (value.length == 0) {
            return true ;
        }
        for (int x = 0 ; x < value.length ; x ++) {
            if (!value[x].matches(this.regex)) {
                return false ;
            }
        }
        return true;
    }
}
public class TestDemo {
    public static void main(String args[]) throws Exception {
        IValidator validator = new ValidatorImpl("\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}") ;
        System.out.println(validator.test("192.168.1.232"));
    }
}


6、
package cn.mldn.demo;

import java.util.regex.Matcher;
import java.util.regex.Pattern;

interface IStringHandle{
    public String[] split() ;
}
class HTMLStringHandle implements IStringHandle {
    private String content ;
    public HTMLStringHandle(String content) {
        this.content = content ;
    }
    @Override
    public String[] split() {
        String regex = "\\w+=\"[a-zA-Z0-9,\\+]+\"" ;
        Matcher matcher = Pattern.compile(regex).matcher(this.content) ;
        StringBuffer buffer = new StringBuffer(this.content.length()) ;
        int count = 0 ;// 个数的统计
        while (matcher.find()) {
            String value = matcher.group(0) ;
            String temp [] = value.split("=") ;
            buffer.append(temp[0]).append(":").append(temp[1].replaceAll("\"","")).append("|") ;
            count ++ ;
        }
        return buffer.toString().split("\\|") ;
    }
}
public class TestDemo {
    public static void main(String args[]) throws Exception {
        String html = "<font face=\"Arial,Serif\" size=\"+2\" color=\"red\">" ;
        IStringHandle handle = new HTMLStringHandle(html) ;
        String result [] = handle.split() ;
        for (String val : result) {
            String temp [] = val.split(":") ;
            System.out.println(temp[0] + " = " + temp[1]);
        }
    }
}


7、
Message_zh_CN.properties：	welcome.info = 希望大家好好学习，不断进步，写出二叉树逆转人生！
Message_en_US.properties：	welcome.info = Good Study. Day Day Up !


------------------------------------------------------

package cn.mldn.demo;
import java.text.MessageFormat;
import java.time.LocalDateTime;
import java.util.Locale;
import java.util.ResourceBundle;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
interface IMessage{
    public String get(String key) ;
}
class MessageImpl implements IMessage {
    private static final String BASE_NAME = "cn.mldn.resource.Message" ;
    private Locale locale ;
    private ResourceBundle resource = null ;
    public MessageImpl(String args[]) {
        if (args.length == 1) {
            try {
                this.init(Integer.parseInt(args[0]));
            } catch (Exception e) {
                this.init(0);
            }
        } else {
            this.init(0);
        }
    }
    public MessageImpl(int code) {
        this.init(code);
    }
    private void init(int code) {
        switch (code) {
            case 1 :
                this.locale = new Locale("zh","CN") ;
                break ;
            case 2 :
                this.locale = new Locale("en","US") ;
                break ;
            default :
                this.locale = Locale.getDefault() ;
                break ;
        }
        this.resource = ResourceBundle.getBundle(BASE_NAME,this.locale) ;
    }
    @Override
    public String get(String key) {
        try {
            return this.resource.getString(key);
        } catch (Exception e) {
            return "Nothing" ;
        }
    }
}
public class TestDemo {
    public static void main(String args[]) throws Exception {
        IMessage message = new MessageImpl(args) ;
        System.out.println(message.get("welcome.info"));
    }
}


8、
package cn.mldn.demo;
class Student implements Comparable<Student> {
    private String name ;
    private int age ;
    private double score ;
    public Student(String name, int age, double score) {
        this.name = name;
        this.age = age;
        this.score = score;
    }
    @Override
    public int compareTo(Student o) {
        if (this.score < o.score) {
            return 1 ;
        } else if (this.score > o.score) {
            return -1 ;
        } else {
            if (this.age < o.score) {
                return -1 ;
            } else if (this.age > o.age) {
                return 1 ;
            } else {
                return 0 ;
            }
        }
    }
    @Override
    public String toString() {
        return String.format("姓名：%s、年龄：%s、成绩：%s", this.name, this.age, this.score);
    }
}
interface IHandle<T> {
    public T[] result() ;
}
class StudentHandle implements IHandle<Student> {
    public String content ;
    public StudentHandle(String content) {
        this.content = content ;
    }
    @Override
    public Student[] result() {
        String values[] = this.content.split("\\|") ;
        Student objects [] = new Student[values.length] ; // 确定数组大小
        for (int x = 0 ; x < objects.length ; x ++) {
            String temp [] = values[x].split(":") ;
            objects[x] = new Student(temp[0],Integer.parseInt(temp[1]),Double.parseDouble(temp[2])) ;
        }
        return objects;
    }
}
public class TestDemo {
    public static void main(String args[]) throws Exception {
        String str = "张三:21:98|李四:22: 89|王五:20:70" ;
        IHandle<Student> handle = new StudentHandle(str) ;
        Student result [] = handle.result() ;
        for (Student stu : result) {
            System.out.println(stu);
        }
    }
}
